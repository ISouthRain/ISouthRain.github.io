[{"content":"Shortcode *使用时请将 a 去掉*\nppt 1 2  {a{\u003c ppt src=\"ppt网址/任何网址\" \u003e}} # 使用的时候把字母a去掉，我加上是为了防止被识别生效   gallery 1 2 3 4  {a{\u003c gallery \u003e}} {a{\u003c figure src=\"/path.png\" \u003e}} {a{\u003c figure src=\"/path1.png\" \u003e}} {a{\u003c /gallery \u003e}}   youtube 1  {a{\u003c youtube Hffajfw\u003e}}   align 1 2 3  {a{\u003c align left \"文字居左\" \u003e}} {a{\u003c align center \"文字居中\" \u003e}} {a{\u003c align right \"文字居右\" \u003e}}    文字居左\n文字居中\n文字居右\nmovie 视频/本地视频 1  {a{\u003c movie \"/path/\" \u003e}}   Bilibili 1 2  {a{\u003c bilibili BV1kK41167ni \u003e}} # 使用的时候把字母a去掉，我加上是为了防止被识别生效   Github 1 2  使用时将 a 去掉 {a{\u003c github name=\"Organic-Carbon-Estimating\" link=\"https://github.com/guanqr/Organic-Carbon-Estimating\" description=\"A program used in estimating organic carbon stocks in oceans. 计算指定海域的有机碳存量，包括颗粒有机碳与溶解有机碳，数据依赖于 NASA 中分辨率成像光谱仪 MODIS 遥感产品。\" color=\"#e16737\" language=\"MATLAB\" \u003e}}     Organic-Carbon-Estimating  A program used in estimating organic carbon stocks in oceans. 计算指定海域的有机碳存量，包括颗粒有机碳与溶解有机碳，数据依赖于 NASA 中分辨率成像光谱仪 MODIS 遥感产品。  MATLAB   Notice  十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\n 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\n 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\n 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\n Quote  十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\n To see a world in a grain of sand. And a heaven in a wild flower. Hold infinity in the palm of your hand. And eternity in an hour.\n Quote-center 十里青山远，潮平路带沙\n数声啼鸟怨年华\n又是凄凉时候，在天涯\n白露收残月，清风散晓霞\n绿杨堤畔问荷花\n记得年时沽酒，那人家\n ","description":"","tags":["Hugo"],"title":"Shortcode","uri":"/post/20230310-hugoshortcodeuse.zh-cn/"},{"content":"use-package 源码地址 GitHub - jwiegley/use-package: A use-package declaration for simplifying your…\n什么是 use-packaeg use-package 是管理 Emacs 包(插件) 的一个宏管理器 可以管理每个包的设置，并配置和定义\n安装 use-package  将以下源码复制到你的 init.el 文件中, 然后重启 Emacs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ;; 添加下载包的来源 (eval-and-compile (customize-set-variable 'package-archives '( (\"melpa\" . \"http://melpa.org/packages/\") (\"org\" . \"http://orgmode.org/elpa/\") (\"gnu\" . \"https://elpa.gnu.org/packages/\") (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\") )) (package-initialize) ;; 如果Emacs 检测到你没有安装 use-package, 那么自动安装 use-package (unless (package-installed-p 'use-package) (package-refresh-contents) (package-install 'use-package)) )     使用 use-package  例如: 安装 doom-themes 主题 1 2 3 4 5  ;; 安装 doom-themes 主题，并启用 doom-one 主题 (use-package doom-themes :ensure t :config (load-theme 'doom-one t))     use-package 关键词解释  :ensure t/nil 是否从网络源安装？ t 代表从网络安装，nil 代表从 Emacs 内置包加载(如果Emacs内置了这个包，Emacs如果没有那么将报错) :config 加载/下载 包 之后再加载的配置 :init 加载/下载 包 之前加载的配置 :defer num 懒加载，num 代表数字, 在 Emacs 启动完成 num秒后再加载 :config 的内容, 可以减少 Emacs 启动时间 还有更多关键词使用，可以自己到项目地址查看 比如 bind 自定义按键， commands 调用某个命令后再加载 :config 配置  ","description":"","tags":["Emacs"],"title":"Emacs use-package 包管理器","uri":"/post/20221215-emacs-use-package.zh-cn/"},{"content":"google-translate 源码地址  GitHub - atykhonov/google-translate: Emacs interface to Google Translate  安装 google-translate  安装 use-package , 如果你没有使用 use-package   1 2 3 4 5 6 7 8 9 10 11 12 13  (eval-and-compile (customize-set-variable 'package-archives '( (\"melpa\" . \"http://melpa.org/packages/\") (\"org\" . \"http://orgmode.org/elpa/\") (\"gnu\" . \"https://elpa.gnu.org/packages/\") (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\") )) (package-initialize) (unless (package-installed-p 'use-package) (package-refresh-contents) (package-install 'use-package)) )    安装 google-translate   1 2 3 4 5 6 7 8  (use-package google-translate :ensure t :config (setq google-translate-default-source-language \"auto\" google-translate-default-target-language \"zh-CN\") (setq google-translate-translation-directions-alist '((\"en\" . \"zh-CN\") (\"zh-CN\" . \"en\") (\"en\" . \"ru\"))) )   配置解释   语言来源, 默认自动\n1  (setq google-translate-default-source-language \"auto\")     目标语言，中文简体\n1  (setq google-translate-default-target-language \"zh-CN\")     翻译方案\n 英文 -\u003e 中文, 中文 -\u003e 英文, 英文 -\u003e 俄语, 使用 C-n 切换   1 2  (setq google-translate-translation-directions-alist '((\"en\" . \"zh-CN\") (\"zh-CN\" . \"en\") (\"en\" . \"ru\")))     使用  将光标放到你要翻译的文本上 M-x google-translate-smooth-translate 回车 C-n 切换翻译方案  本期视频  .bilibili_shortcodes { position: relative; width: 100%; height: 0; padding-bottom: 66%; margin: auto; overflow: hidden; text-align: center; } .bilibili_shortcodes iframe { position: absolute; width: 90%; height: 90%; left: 0; top: 0; }         ","description":"","tags":["Emacs"],"title":"Emacs google-translate 翻译文本","uri":"/post/20221213-emacs-google-translate.zh-cn/"},{"content":"前言 由于 Windows 的某些原因使用 Emacs 总会那么的不方便或者不好用,\n有的人是在 MSYS2 下使用, 但由于 MYSYS2 软件包不多, 还是差了点\n所以本文借助 Windows WSL 进行使用 Emacs 么, 像在 Linux 下使用, 目前体验基本与Linux下体验一致, 不过 EAF 不支持\n效果  安装 WSL, 本文是使用 WSL2 Ubuntu22.04  如果你想把 Ubuntu22.04 安装到自己指定盘符, 可以观看此文章 如何将WSL安装到其它驱动器或者文件夹中 | myfreax  启用 WSL 功能  Win + s 打开搜索, 输入 启用或关闭 Windows 功能, 并打开  将红线两个功能打勾✔, 启用后重启电脑  以 管理员权限 打开 Powershell, 设置默认为 wsl2 1  wsl --set-default-version 2    安装 Ubuntu22.04, wsl.exe –install -d Ubuntu22.04  如果安装不成功, 请参考文章 如何将WSL安装到其它驱动器或者文件夹中 | myfreax   运行 wsl, 直接在 Powershell 输入 wsl 运行  WSL 文件所在目录 \\\\wsl$ 自觉安装 Emacs 安装 GUI 支持 下载并安装 MobaXterm MobaXterm Xserver with SSH, telnet, RDP, VNC and X11 - Download\n配置 GUI 支持   Ubuntu 下 编写 ~/.bashrc 或者 ~/.zshrc 末尾处添加\n1 2 3 4 5 6 7  # ~/.bashrc 或者 ~/.zshrc 文件 # 获取 Windows WSL IP host_ip=$(cat /etc/resolv.conf |grep \"nameserver\" |cut -f 2 -d \" \") # 将 GUI 显示让 mobaxterm 显示代替 export DISPLAY=\"$host_ip:0\" # 如果你要使用 windows 代理 # export ALL_PROXY=\"http://$host_ip:7890\"     打开 MobaXterm, 挂在后台, 有颜色为启动   刷新 shell, source ~/.zshrc 或者 source ~/.bashrc\n  Ubuntu 启动 emacs 试试, 弹出的窗口一直点 是 即可\n  GUI 配置 MobaXterm 模糊解决, 修改 DIP  Ubuntu Emacs 字体补充  当你打开 emacs 时候会乱码之类的, 是因为缺少字体 将 C:\\Windows\\Fons 目录下的字体全部复制到 \\\\wsl$\\Ubuntu22.04\\root\\.local\\share\\fonts  美化 Emacs   emasc 启动屏幕尺寸太小, 修改数字\n(set-face-attribute ‘default nil :height 150)\n  建议 emasc 安装以下包\n cnfonts 用来调整 emacs 字体大小 all-the-icons 为 emacs 提供 图标支持 emojfyi 为 emacs 提供 表情符号支持    ","description":"","tags":["Emacs"],"title":"WSL Emacs","uri":"/post/2022-07-03-windowsemacsforwsl.zh-cn/"},{"content":"什么是 GnuPG ? GPG 全名叫 GNU Privacy Guard, 是一个加密前端, 可以使用 RSA 、ESCDA 等算法去加密\n下载 GnuPG  GnuPG官网  获取密钥(Windows 使用终端命令) 请记住, 密钥绝不要给任何人\n1  gpg --gen-key   默认选项即可\n加密解密文件  加密之前  加密分为两种  对称加密解密(双方只要输入对密码就可以查看和加密) 非对称加密解密(对方使用 你给的公钥加密, 只有使用 你自己的密钥 能解密查看)     详细解释  对称加密解密  加密(输入两次相同密码)   1  gpg --symmetric filename    解密(输入配对密码, 与上面的密码相同) 1 2 3 4  # 仅仅解密内容 gpg -d filename.gpg # 解密并输出原文件 gpg -o fileame -d filename.gpg     非对称加密解密(个人常用)  加密 1 2  # -r 表示 gpg 用户, 就刚才创建密钥的用户名 gpg -e -r User filename    解密 1 2 3 4  # 仅仅解密内容 gpg -d filename.gpg # 解密并输出原文件 gpg -o fileame -d filename.gpg     导出(请不要将密钥发送给任何人,自己导出密钥保存就好) gpg -o filename.asc --export keyID 导入(个人使用导入密钥就好) 1  gpg --imort filename.asc   FAQ❓   是不是在我的电脑上，使用别人A的公钥加密了一个文件，而我没有别人A的密钥，我也无法读取查看。是吗？？\n是的\n  是不是使用 非对称加密(不需要密码)，别人没有公钥和私钥就无法破解读取数据？\n公钥大家都可以有，可以用来加密(比如在公共平台发一个只有你能解密的消息)但不可以用来解密。私钥只有你有，可以用来解密\n也就是只有私钥才能查看数据？？在属于自己的机器，只需要导入私钥就好了，是吧(是的)\n  那现在的GPG加密在没有私钥的情况下有没有可能被破解？？\n首先，GPG只是一个前端，背后用的一般是RSA。密钥位数够的话，你可以认为没有可能\n  Emacs 使用 GPG  只要后端正常使用 GPG, Emacs 打开 .gpg 文件会自动解密, 在编辑保存后自动解密  org-mode 使用 GPG 加密  配置 EPG(Emacs的一个包, 调用 GPG) 1 2 3 4 5 6  (require 'org-crypt) (org-crypt-use-before-save-magic) (setq org-tags-exclude-from-inheritance '(\"crypt\")) ;; GPG ID, 解密一个文件可以知道这个ID, 每个人都不同 (setq org-crypt-key \"0PVT4708DD97889B\") (setq auto-save-default nil)        加密 在标题后面写上 :crypt: , 保存文件将会自动加密此标题内容\n注意: Windows 加密会乱码，导致无法解密org标题内容，谨慎使用(请不要在Windows使用Org加密)\n  解密 将 光标放在具有 :crypt: 标题上, 命令 org-decrypt-entry\n  ","description":"","tags":["Emacs"],"title":"GnuPG(GPG) 加密","uri":"/post/2022-06-25-gpg.zh-cn/"},{"content":"介绍 Xinetd 是一个互联网多功能的工具, 在此这里只使用它的 端口转发 功能\n端口转发 是将服务器端口进行数据转接, 例如: 当你使用服务端口配置好了 imap.gmail.com + 端口, 客户端口就可以直接访问 服务器IP + 端口 就相当于你访问的是 imap.gmail.com + 端口 的数据, 这样就可以避免无法访问gmail\n要求 一台可以访问 gmail 的服务器\n安装 Xinetd 1  apt install xinetd   编辑 Xinetd 配置文件, 让gmail工作 1  vim /etc/xinetd.d/gmail   /etc/xinetd.d/gmail 文件内容:\n# /etc/xinetd.d/gmail service imap { type = UNLISTED port = 993 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = imap.gmail.com 993 per_source = UNLIMITED cps = 100 2 } service smtp-465 { type = UNLISTED port = 465 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.gmail.com 465 per_source = UNLIMITED cps = 100 2 } service smtp-587 { type = UNLISTED port = 587 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.gmail.com 587 per_source = UNLIMITED cps = 100 2 } 运行服务 1  service xinetd start   Hacker Enjoy 把你的Gnus配置接受服务 `imap.gmail.com` 改成 对应于你的 服务器IP 发送邮件设置也一样改成你的服务器IP  ","description":"Gnus 用端口转发功能接收 Gmail","tags":["Emacs Gnus"],"title":"Emacs Gnus 使用 Gmail","uri":"/post/2022-06-04-gnus-use-gmail.zh-ch/"},{"content":"前言 Hugo 添加 Algolia 搜索, 本文以 LoveIt 主题为例\nLoveIt 启用 Algolia 搜索  添加以下代码在你的 config.toml, 根据自己情况填写   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  [params] [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # LoveIt 新增 | 0.2.1 最大结果数目 maxResultLength = 10 # LoveIt 新增 | 0.2.3 结果内容片段长度 snippetLength = 50 # LoveIt 新增 | 0.2.1 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # LoveIt 新增 | 0.2.4 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [outputs] home = [\"HTML\", \"RSS\", \"JSON\"]   获取 Algolia 相关配置  Algolia官网 注册登陆  创建属于 Hugo 的 Application   名称随便填一个, 例如 Hugo CHOOSE YOUR SUBSCRIPTION –\u003e 选择免费的 FREE 点击右侧 —\u003e Next Step:Data Center 选择一个离你网站地方进的地方  获取 index   回到主页\n 点击左下角的 Data sources 选择你刚才注册的 Application    点击左上角 Indices 点击右上角 Greate Index 填一个名称, 例如 Hugo, 之后在 config.toml 配置 index    获取 appID  获取 searchKey   上传到 Algolia  在你的Hugo主目录下运行: 1  hugo    public 目录下会生成 index.json 将 index.json 上传到你的 Algolia index 中  自动化上传 index.json  需要安装 npm, nodejs Nodejs  你的 Hugo 目录下安装 atomc-algolia 1  npm install atomic-algolia --save   你的 Hugo 目录下新建 .env 文件  内容为, 请根据自己信息填写, 每一项缺一不可   ALGOLIA_APP_ID= ALGOLIA_INDEX_NAME=\"\" ALGOLIA_INDEX_FILE=\"public/index.json\" ALGOLIA_ADMIN_KEY= 开始自动上传  hugo 自动生成 public 目录 npm run algolia  添加不同语言的搜索  在 Algolia 同个 Application 创建两个 index 不同语言有不同的 index.json 请在下方找到对应的 search 配置 参考配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107  # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"ISouthRain\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.en.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # LoveIt 新增 | 0.2.1 最大结果数目 maxResultLength = 10 # LoveIt 新增 | 0.2.3 结果内容片段长度 snippetLength = 50 # LoveIt 新增 | 0.2.1 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # LoveIt 新增 | 0.2.4 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [languages.en.params.search.algolia] index = \"\" # 根据你创建的 index 名, 例如 Hugo-en appID = \"\" # 添加自己的 searchKey = \"\" # 添加自己的 [languages.zh-cn] weight = 2 title = \"ISouthRain\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # LoveIt 新增 | 0.2.1 最大结果数目 maxResultLength = 10 # LoveIt 新增 | 0.2.3 结果内容片段长度 snippetLength = 50 # LoveIt 新增 | 0.2.1 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # LoveIt 新增 | 0.2.4 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [languages.zh-cn.params.search.algolia] index = \"\" # 根据你创建的 index 名, 例如 Hugo-zh appID = \"\" # 添加自己的 searchKey = \"\" # 添加自己的     请享受🍔🍟 FAQ❓  遇到了问题?  请在下方回复    ","description":"","tags":["Hugo"],"title":"Hugo LoveIt 添加 Algolia 搜索","uri":"/post/2022-05-04-hugo%E6%B7%BB%E5%8A%A0algolia.zh-cn/"},{"content":" 妄想逃脱大数据的背叛🤨\n RSS  自己管理自己的订阅，掌控自己的爱好!!  要求  一台海外 VPS 一点点 Linux 技术  Flowerss-bot  一个国人开源的 Telegra bot RSS 订阅机器人 搭建非常简单, 功能非常多 只需要填写 bot Token 就可以使用 支持 Telegram Instart view 即时预览 flowerrss-bot  下载 Flowerss-bot  下载对应版本  获取机器人  @BotFather /newbot 随便命名一个 称呼 命名机器人，必须 Bot 或者 _bot 结尾, 例如: MyrssBot 复制 token  修改 config.ynl  修改第一行, 将 token 复制进去 根据自己情况修改需要，默认只需要修改了 token 就可以使用了 详细修改  关于使用 Telegraph 即使预览  默认获取 token 就可以使用 获取方法 Telegtaph 官方机器人 @telegraph  步骤  关注 Telegraph 机器人 在浏览器输入, 自动生成 token  https://api.telegra.ph/createAccount?short_name=称呼名\u0026author_name=用户名 运行 1 2  chmod 755 flowerss-bot ./flowerss-bot   成功了就请享受🌝 感谢作者大大的开源，让我们用上这么好的作品🌹  flowerss-bot  FAQ❓ 遇到问题可以在下面回复\n","description":"搭建 Telegraam Bot RSS 订阅","tags":["Telegram"],"title":"搭建 Telegram Bot RSS 订阅","uri":"/post/2022-05-02-telegrambotrss.zh-cn/"},{"content":"什么是内网穿透? 通俗的说: 把 局域网 变成 公网 那样可以让外面的人访问\n内网穿透工具  Frp ngrok 蜻蜓映射 natapp 以及一些其它的, 不一一列出了, 大家可以上网查查 推荐大家使用 Frp , 因为免费且开源, 易配置, 简单使用  Frp 为例  Frp项目地址  服务器端 下载 frp   根据自己的系统下载对于版本\n  Frp地址\n  Linux 用户可以使用 wget 工具下载\n 例如: wget https://github.com/fatedier/frp/releases/download/v0.42.0/frp_0.42.0_linux_amd64.tar.gz    解压  tar -zxvf frpxxxxxx.tar.gz  前往到解压目录  cd frpxxxxxx  编辑 frps.ini  根据自己情况添加  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  [common] bind_addr = 0.0.0.0 # frp 监听的端口，默认是7000 bind_port = 7000 # 授权码, 随便填一个 token = xxxxx # frp管理后台端口，请按自己需求更改 dashboard_port = 7100 # frp管理后台用户名和密码 dashboard_user = xxxx dashboard_pwd = xxxx enable_prometheus = true # frp日志配置 log_file = /var/log/frps.log log_level = info log_max_days = 3   运行 frps 1 2 3 4 5  # Linux 用户 chomd +x frps ./frps -c frps.ini # windows用户 ./frps.exe -c frps.ini   客户端(你的局域网端)  相同方法下载  解压后 编辑 frpc.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # 服务端配置 [common] server_addr = 服务器ip # 请换成设置的服务器端口 server_port = 7000 token = 与上面frps.ini的相同 # 配置ssh服务 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 8022 remote_port = 例如8022 [web] type = http local_ip = 127.0.0.1 local_port = 8080 remote_port = 例如8080 # 多端口 [range:Test] [web] type = http local_ip = 127.0.0.1 local_port = 9000-9010 remote_port = 例如9000-9010   启动 frpc 1 2 3 4  # Linux用户 ./frpc -c frpc.ini # Windows用户 ./frpc.exe -c frpc.ini   测试 在你的公网端, 进行测试\n 例如, 服务器端链接局域网端 ssh  1 2 3  ssh -p 端口 root@服务器IP # 例如 ssh -p 8022 root@192.13.33.6   服务器端口必须要开放对应端口\n注意, 当你想访问局域网端时, 局域网端口的本地端口一定是开的, 并对应于你设置frpc.ini的端口\n服务器端 frps, 局域网端 frpc, 必须同时开启才可正常使用\nFAQ❓ 可以让服务器端开机启动, 不太麻烦 1 2 3 4 5 6 7  cd frp目录 mkdir -p /etc/frp cp frps.ini /etc/frp cp frps /usr/bin cp systemd/frps.service /usr/lib/systemd/system/ systemctl enable frps systemctl start frps   ","description":"Frp 内网穿透","tags":["网络"],"title":"Frp内网穿透","uri":"/post/2022-05-01-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.zh-cn/"},{"content":"粗体 1  **粗体**   斜体 *斜体* 粗斜体 1  ***粗斜体***   粗斜体 1  ***粗斜体***   链接🔗 1  [备注](链接)   文件链接 1  ![备注](链接)   内部文件跳转 \u003cspan id = \"瞄点\"\u003e跳转至瞄点\u003c/span\u003e [跳转至瞄点](#瞄点) 效果如下 效果如下👇\n 嵌入视频 1 2 3  \u003cvideo poster=\"效果动图\" width=\"360\" height=\"240\" controls\u003e \u003csource src=\"视频链接链接，支持其他格式，当使用其他格式时，不要替换后面的 video/mp4\" type=\"video/mp4\"\u003e \u003c/video\u003e   折叠列表 1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u003cdetails\u003e \u003csummary\u003e这是一个折叠列表\u003c/summary\u003e 折叠内容, 上面空一行 下一行 \u003cdetails\u003e \u003csummary\u003e这是一个嵌套折叠列表\u003c/summary\u003e 嵌套折叠内容, 上面空一行 下一行 \u003c/details\u003e \u003c/details\u003e   效果如下  表格 1 2 3  |1 | 2 | 3| |:- | :-: | -:| |居右| 居中 |居左|   代码块 用6个 ` 包裹\n块状 1  `块状`   下划线 1  \u003cu\u003e下划线\u003c/u\u003e   删除线 1  ~~删除线~~   使用表情 1 2 3  露营 ⛺ 真好笑 😂   露营⛺\n真好笑😂\n表情符号码表\n","description":"","tags":["Markdwon"],"title":"Markdown语法","uri":"/post/2022-04-30-markdown%E8%AF%AD%E6%B3%95.zh-cn/"},{"content":" Emacs 不仅可用于编码， 更可用于生活。 \n Home 阅读之前  本文的 普通人 指的是 非程序员  为什么编写这编文章?   因为受到了 Protesilaos Stavrou 影响   Protesilaos Stavrou 隐居、反内卷，不意味着躺平｜专访2021年度“杰出新自由软件贡献者”奖得主      本文章应该适合新手阅读,因为我定位在了 如何使用 Emacs  本文旨在让更多的人(非程序员)使用 Emacs 管理自己的生活, Emacs不单限于代码编辑   文章适合人群  追求自由与和平  没有写过代码的  在寻找一个 笔记软件 的用户  使用GTD 管理自己的生活   安装 Emacs  官方网站  Linux   使用对应的包管理下载, 例如 Ubuntu  1  sudo apt install emacs      Windows   GNU Emacs 选择最新版本 zip 文件, 解压运行 emacs.exe    Mac OSX   Mac for Emacs     简单使用   按键说明 \n 开头的 C 代表 Ctrl 按键  开头的 M 代表 Alt 按键     基础按键 \n M + x 输入命令  C + g 取消所有命令/状态  C + n 即 Ctrl + n , 等于 键盘向下按键 , 解释为 将光标移动到下一行  C + p 即 Ctrl + n , 等于 键盘向下按键 , 解释为 将光标移动到下一行  C + f 即 Ctrl + f , 等于 键盘向右按键 , 解释为 将光标向右移动一个字母  C + b 即 Ctrl + b , 等于 键盘向左按键 , 解释为 将光标向左移动一个字母     退出软件 \n C + x 之后再按 C + c     注意事项 \n 对于 Emacs 来说, 你的每一个动作都是在执行命令, 例如, 当你按键 C + n 就是在执行 next-line 命令, 可以使用 M + x 输入 next-line 试试哦!     Emacs 允许用户修改Emacs所有的设置  Emacs 是真正属于用户自己了, 如果你对Emacs现有的不满意, 自己完全可以设置  按照自己的意愿使用Emacs  Emacs 拥有的生态甚至已经比肩一个 系统 的生态了   基本配置  所有的配置都会放到 init.el  Linux/Uinx (Mac OSX)   ~/.emacs.d/init.el    Windows   C:\\Users\\Username\\AppData\\Roaming\\.emacs.d\\init.el     简单配置  请将代码复制到 init.el 文件中, 修改后重启 Emacs 后生效  显示行号  1 2 3 4  ;; ~/.emacs.d/init.el ;; ;; 开头为注释 ;;显示行号 (global-linum-mode 1)    以下为个人的基本配置  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  ;; 设置编码 (setq default-buffer-file-coding-system 'utf-8) (prefer-coding-system 'utf-8) ;;显示行号 (global-linum-mode 1) ;;高亮当前行 (global-hl-line-mode 1) ;;关闭启动画面 (setq inhibit-startup-message t) (setq toggle-truncate-lines t) ;;显示时间 (display-time-mode 1) ;; 常显 (setq display-time-24hr-format t) ;;格式 (setq display-time-day-and-date t) ;;显示时间、星期、日期 ;; 关闭启动帮助画面 (setq inhibit-splash-screen 1) ;; 备份文件 nil or t (setq make-backup-files nil) ;; 自动加载外部修改的文件 (global-auto-revert-mode 1) ;; 关闭自动保存文件 (setq auto-save-default t) ;; 关闭警告声 (setq ring-bell-function 'ignore) ;; 简化yes和no (fset 'yes-or-no-p 'y-or-n-p)     区分系统类型和GUI或者TUI界面  以下设置会根据你目前的系统而加载代码, 通常用来区分 windows 和 linux 配置路径问题    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ;;不同系统的配置 ;; Windows (when (string= \"windows-nt\" system-type) ;; 代码放在这个范围 ) ;; Linux (when (string= \"gnu/linux\" system-type) ;; 代码放在这个范围 ) ;; Mac OSX (when (string= \"darwin\" system-type) ;; 代码放在这个范围 ) ;; GUI图形界面或者TUI终端界面 (if (display-graphic-p) ;; GUI 代码放置，多行代码的话用 (progn) 包一下 (progn (message \"这是GUI读取的配置1\") (message \"这是GUI读取的配置2\") ) ;; TUI 代码放置 (message \"这是TUI 读取的配置1\") (message \"这是TUI 读取的配置2\") )   配置管理, 请重视此标题, 这将在未来帮助你减少大量时间  希望用户认真学习一下管理配置, 现在即使不会去管理, 但请参看  你永远不会对你的配置满意, 所以请学习管理你自己的配置  新建 ~/.emacs.d/core/init-basic.el 注意路径  1 2 3 4 5 6  ;; ~/.emacs.d/core/init-basic.el ;; 存放你的配置代码 ;;显示行号 (global-linum-mode 1) (provide 'init-basic) ;; 必要的, 让文件可以被调用    编辑 ~/.emacs.d/init.el  1 2 3 4 5  ;; ~/.emacs.d/init.e ;; 添加上面要添加进来的文件目录 (add-to-list 'load-path (expand-file-name \"core\" user-emacs-directory)) ;; 必要的, 注意路径 (require 'init-basic) ;; 将 ~/.emacs.d/core/init-basic.el 调用 ;; 这样就可以大胆把你的配置分不同文件管理了, 记得调用就好     包安装  对于 Emacs 原生来说太简陋了, 看起来可不太优雅  Emacs 安装扩展包使得更加好看与适用   原生安装  Emacs 自带一个安装扩展包的方法   在此 不解释原生安装包方法 , 因为原生安装的方法并不好用,而且一旦安装很多软件包的话会影响到 Emacs 的启动速度     使用 Use-package 安装扩展包 配置 Use-package 有关更多 use-package 详解请到官方查看 GitHub - jwiegley/use-package: A use-package declaration for simplifying your… \n use-package 常用参数   ensure t/nil ;; t 将会从官方网站下载, nil 从本地下载, 利用 load-path 参数指定目录加载  load-path “path” ;; 指定包加载路径  defer num ;; num 为数字, 单位为秒, 意思是当 emacs 启动后多少秒再加载这个包, 对于以后减少 Emacs 启动时间非常有用  init ;; 加载包前加载 init 的配置  config ;; 加载完包后再加载 config 的配置       将以下内容放到你的配置文件中 init.el    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  (package-initialize) (require 'package) (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") ) (when (not (package-installed-p 'use-package)) (package-refresh-contents) (package-install 'use-package) ) ;; This is only needed once, near the top of the file (eval-when-compile (require 'use-package)) (require 'use-package-ensure) ;; 自动下载，不需要 :ensure t (setq use-package-always-ensure t)    下载一个包试试  1 2 3  (use-package 包名) ;; 例如 (use-package evil), 就会下载evil包 ;; 重新启动 Emaccs 就会看到目录 ~/.emacs.d/elpa 有这个包了     Emacs 光标移动选择  如果你是 Vim 用户, 建议安装 Evil 这个包, 它会模拟 vi 的键盘操作流程.  使用 Emacs 原生按键, 这可能 废手指 哈哈哈, 建议将 Ctrl 换成 Caps Lock , Windows 用户使用 AutoHotkey, 其余类似.  Meow 猫态编辑, 有点类似 vim , 但是比 evil 更加的小巧和高效, 不过建议新人先不用这个   个人推荐键盘  Evil 可能更加使用新手, 推荐去搜索一下 vi 键盘如何使用   传送门 —\u003e Vi 速查表     美化 Emacs theme 主题 Emacs 只能加载一个主题, 但是可以安装多个主题, 可以在 Emacs 启动后再切换主题, 本文以 monokai 主题为例子 \n monokai  1 2 3 4 5  (use-package monokai :ensure t :config (load-theme 'monokai t) )     mode-line 下方的状态栏美化, 以 doom-modeline 为例, 还有很多选择 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; Modeline (use-package doom-modeline :ensure t ;; 从网上下载 :defer 1 ;; 延迟加载 ;; :init (doom-modeline-mode 1) :config (doom-modeline-mode 1) ;; If non-nil, cause imenu to see `doom-modeline' declarations. ;; This is done by adjusting `lisp-imenu-generic-expression' to ;; include support for finding `doom-modeline-def-*' forms. ;; Must be set before loading doom-modeline. (setq doom-modeline-support-imenu t) ;; How tall the mode-line should be. It's only respected in GUI. ;; If the actual char height is larger, it respects the actual height. (setq doom-modeline-height 15) ;; How wide the mode-line bar should be. It's only respected in GUI. (setq doom-modeline-bar-width 4) ;; Whether to use hud instead of default bar. It's only respected in GUI. (setq doom-modeline-hud nil) ;; The limit of the window width. ;; If `window-width' is smaller than the limit, some information won't be ;; displayed. It can be an integer or a float number. `nil' means no limit.\" (setq doom-modeline-window-width-limit 0.25) ;; How to detect the project root. ;; nil means to use `default-directory'. ;; The project management packages have some issues on detecting project root. ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable ;; to hanle sub-projects. ;; You can specify one if you encounter the issue. (setq doom-modeline-project-detection 'auto) ;; Determines the style used by `doom-modeline-buffer-file-name'. ;; ;; Given ~/Projects/FOSS/emacs/lisp/comint.el ;; auto =\u003e emacs/lisp/comint.el (in a project) or comint.el ;; truncate-upto-project =\u003e ~/P/F/emacs/lisp/comint.el ;; truncate-from-project =\u003e ~/Projects/FOSS/emacs/l/comint.el ;; truncate-with-project =\u003e emacs/l/comint.el ;; truncate-except-project =\u003e ~/P/F/emacs/l/comint.el ;; truncate-upto-root =\u003e ~/P/F/e/lisp/comint.el ;; truncate-all =\u003e ~/P/F/e/l/comint.el ;; truncate-nil =\u003e ~/Projects/FOSS/emacs/lisp/comint.el ;; relative-from-project =\u003e emacs/lisp/comint.el ;; relative-to-project =\u003e lisp/comint.el ;; file-name =\u003e comint.el ;; buffer-name =\u003e comint.el\u003c2\u003e (uniquify buffer name) ;; ;; If you are experiencing the laggy issue, especially while editing remote files ;; with tramp, please try `file-name' style. ;; Please refer to https://github.com/bbatsov/projectile/issues/657. (setq doom-modeline-buffer-file-name-style 'auto) ;; Whether display icons in the mode-line. ;; While using the server mode in GUI, should set the value explicitly. (setq doom-modeline-icon (display-graphic-p)) ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'. (setq doom-modeline-major-mode-icon t) ;; Whether display the colorful icon for `major-mode'. ;; It respects `all-the-icons-color-icons'. (setq doom-modeline-major-mode-color-icon t) ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'. (setq doom-modeline-buffer-state-icon t) ;; Whether display the modification icon for the buffer. ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'. (setq doom-modeline-buffer-modification-icon t) ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons. (setq doom-modeline-unicode-fallback nil) ;; Whether display the buffer name. (setq doom-modeline-buffer-name t) ;; Whether display the minor modes in the mode-line. (setq doom-modeline-minor-modes nil) ;; If non-nil, a word count will be added to the selection-info modeline segment. (setq doom-modeline-enable-word-count nil) ;; Major modes in which to display word count continuously. ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'. ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or ;; remove the modes from `doom-modeline-continuous-word-count-modes'. (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)) ;; Whether display the buffer encoding. (setq doom-modeline-buffer-encoding t) ;; Whether display the indentation information. (setq doom-modeline-indent-info nil) ;; If non-nil, only display one number for checker information if applicable. (setq doom-modeline-checker-simple-format t) ;; The maximum number displayed for notifications. (setq doom-modeline-number-limit 99) ;; The maximum displayed length of the branch name of version control. (setq doom-modeline-vcs-max-length 12) ;; Whether display the workspace name. Non-nil to display in the mode-line. (setq doom-modeline-workspace-name t) ;; Whether display the perspective name. Non-nil to display in the mode-line. (setq doom-modeline-persp-name t) ;; If non nil the default perspective name is displayed in the mode-line. (setq doom-modeline-display-default-persp-name nil) ;; If non nil the perspective name is displayed alongside a folder icon. (setq doom-modeline-persp-icon t) ;; Whether display the `lsp' state. Non-nil to display in the mode-line. (setq doom-modeline-lsp t) ;; Whether display the GitHub notifications. It requires `ghub' package. (setq doom-modeline-github nil) ;; The interval of checking GitHub. (setq doom-modeline-github-interval (* 30 60)) ;; Whether display the modal state icon. ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc. (setq doom-modeline-modal-icon t) ;; Whether display the mu4e notifications. It requires `mu4e-alert' package. (setq doom-modeline-mu4e nil) ;; also enable the start of mu4e-alert ;; (mu4e-alert-enable-mode-line-display) ;; Whether display the gnus notifications. (setq doom-modeline-gnus t) ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable) (setq doom-modeline-gnus-timer 2) ;; Wheter groups should be excludede when gnus automatically being updated. (setq doom-modeline-gnus-excluded-groups '(\"dummy.group\")) ;; Whether display the IRC notifications. It requires `circe' or `erc' package. (setq doom-modeline-irc t) ;; Function to stylize the irc buffer names. (setq doom-modeline-irc-stylize 'identity) ;; Whether display the environment version. (setq doom-modeline-env-version t) ;; Or for individual languages (setq doom-modeline-env-enable-python t) (setq doom-modeline-env-enable-ruby t) (setq doom-modeline-env-enable-perl t) (setq doom-modeline-env-enable-go t) (setq doom-modeline-env-enable-elixir t) (setq doom-modeline-env-enable-rust t) ;; Change the executables to use for the language version string (setq doom-modeline-env-python-executable \"python\") ; or `python-shell-interpreter' (setq doom-modeline-env-ruby-executable \"ruby\") (setq doom-modeline-env-perl-executable \"perl\") (setq doom-modeline-env-go-executable \"go\") (setq doom-modeline-env-elixir-executable \"iex\") (setq doom-modeline-env-rust-executable \"rustc\") ;; What to display as the version while a new one is being loaded (setq doom-modeline-env-load-string \"...\") ;; Hooks that run before/after the modeline version string is updated (setq doom-modeline-before-update-env-hook nil) (setq doom-modeline-after-update-env-hook nil) )   buffer-tab, 上方的 tab  以 awesome-tab 为例, 下载文件 awesome-tab.el  并把文件放到 .emacs.d/core/plugins 文件夹    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; awesome-tab 管理 Buffer (use-package awesome-tab :ensure nil :defer 2 :load-path \"~/.emacs.d/core/plugins\" ;; 从次路径加载这个包 :config (awesome-tab-mode t) ;; 设置标签栏长度 (setq awesome-tab-label-fixed-length 14) ;; 高度 (setq awesome-tab-height 150) ;; 按使用索引排行 ;; (setq awesome-tab-show-tab-index t) ;; 如果使用 helm (awesome-tab-build-helm-source) ;; 隐藏那些buffer (defun awesome-tab-hide-tab (x) (let ((name (format \"%s\" x))) (or (string-prefix-p \"*epc\" name) (string-prefix-p \"*helm\" name) (string-prefix-p \"*bm-bookmarks*\" name) (string-prefix-p \"*Compile-Log*\" name) (string-prefix-p \"*lsp\" name) (and (string-prefix-p \"magit\" name) (not (file-name-extension name))) ))) ;; buffer 群组归类 (defun awesome-tab-buffer-groups () \"`awesome-tab-buffer-groups'control buffers' group rules. Group awesome-tab with mode if buffer is derived from `eshell-mode'`emacs-lisp-mode'`dired-mode'`org-mode'`magit-mode'. All buffer name start with * will group to \\\"Emacs\\\". Other buffer group by `awesome-tab-get-group-name'with project name.\" (list (cond ((or (string-equal \"*\" (substring (buffer-name) 0 1)) (memq major-mode '(magit-process-mode magit-status-mode magit-diff-mode magit-log-mode magit-file-mode magit-blob-mode magit-blame-mode ))) \"Emacs\") ((derived-mode-p 'eshell-mode) \"EShell\") ((derived-mode-p 'emacs-lisp-mode) \"Elisp\") ((derived-mode-p 'dired-mode) \"Dired\") ((memq major-mode '(org-mode org-agenda-mode diary-mode)) \"OrgMode\") (t (awesome-tab-get-group-name (current-buffer)))))) )   增强 Emacs 搜索功能 最新三套装  vertico 提供一个搜索框架  consult 文本搜索  orderless 使用无序搜索, 例如你要搜 whoami ，你可以直接 am who   vertico 1 2 3 4 5 6 7 8 9 10 11 12 13  (use-package vertico :defer 3 :ensure t :config (vertico-mode t)) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; 每次重启后都有搜索记录 (use-package savehist :defer 3 :ensure nil :init (savehist-mode) )   安装后重启 Emacs , 再按 M-x 看看有什么不同 \norderless 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ;; Optionally use the `orderless' completion style. (use-package orderless :defer 3 :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers '(+orderless-dispatch) ;; orderless-component-separator #'orderless-escapable-split-on-space) (setq completion-styles '(orderless basic) completion-category-defaults nil completion-category-overrides '((file (styles partial-completion))))) ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ;; A few more useful configurations... (use-package emacs :defer 3 :ensure nil :init ;; Add prompt indicator to `completing-read-multiple'. ;; We display [CRM\u003cseparator\u003e], e.g., [CRM,] if the separator is a comma. (defun crm-indicator (args) (cons (format \"[CRM%s] %s\" (replace-regexp-in-string \"\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\'\" \"\" crm-separator) (car args)) (cdr args))) (advice-add #'completing-read-multiple :filter-args #'crm-indicator) ;; Do not allow the cursor in the minibuffer prompt (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode) ;; Emacs 28: Hide commands in M-x which do not work in the current mode. ;; Vertico commands are hidden in normal buffers. ;; (setq read-extended-command-predicate ;; #'command-completion-default-include-p) ;; Enable recursive minibuffers (setq enable-recursive-minibuffers t))   consult 1 2 3 4 5 6 7  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; Search content in the file (use-package consult :defer 3 :ensure t :bind (\"C-s\" . consult-line) )   安装后打开一个文件, 按 C-s 试试搜索文本 \nOrg-mode ","description":"","tags":["Emacs"],"title":"普通人如何使用Emacs","uri":"/post/2022-04-29-how-to-use-emacs.zh-cn/"},{"content":"git push 推送/上传到 GitHub git push 输入账号密码后推送不了? 因为 Github 的推送/上传机制改了\n之前可以输入 账号密码 就可以 push, 现在只能使用 github token 代替 密码 才能推送/上传\n申请 token Settings –\u003e Developer settings –\u003e Personal access tokens –\u003e Generate new token\n Note –\u003e 随便填一个名称 Expiration –\u003e 选择该 token 有效期，个人建议如果是使用推送/上传功能，建议选 No expiration 其余 打勾 按照你自己需求，新手建议全部打勾 Generate token 点击创建  将你创建刚刚创建 token 复制 再次使用 git push  输入你的用户名,回车 将 token 粘贴上去, 回车  如果成功 上传/推送 ，请享受🎉🎉🎉 每次 推送/上传 都要输入 账号密码?? 如果你不想每次 上传/推送 都要输入 账号密码，可以看我的另一个文章 每次都要输入账号密码太麻烦了\n👉 永久免账号密码 推送/上传 GitHub\nFAQ❓ 如果你遇到了问题，可以在下面评论去提问，基本都会回复的\n","description":"","tags":["Git"],"title":"如何上传/推送到 Github","uri":"/post/2022-04-29-%E6%8E%A8%E9%80%81github.zh-cn/"},{"content":"使用以下方法后 git push 再也不用一直输入 账号密码了! git push 每次都要输入账号密码? 从此解决 正文👇 首先配置 Git 个人信息 依此输入以下两个命令: 配置你的 GitHub 邮箱📬 1  git config --global user.email \"你在 GitHub 注册的邮箱\"   配置你的 GitHub 用户名 1  git config --global user.name \"你的 GitHub 用户名\"   输入以下命令后，将会保存你 git push 时登录的信息 当下一次 git push 时就不用再输入登录信息了! 1  git config --global credential.helper store   如何推送/上传到GitHub FAQ❓ 由于GitHub已经更改了 git push 机制 git push 时密码改用 token 已完成所有工作, 请 git push 一次试试 如果成功了，请享受🎉🎉🎉 ","description":"","tags":["Git"],"title":"永久免账号密码推送Github","uri":"/post/2022-04-28-%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E6%8E%A8%E9%80%81git.zh-cn/"},{"content":"2022-08-30 更新 📍📍全部帐号可用, 不支持网页版的也可以使用了, 使用本教程就可以正常使用 📍📍 Telegram收发微信消息(可以不需要购买服务器，单纯手机也可以) 📍📍 在开始本教程之前，请你确认你的微信号是否支持网页端登录，如果不支持请离开  微信网页版入口 也可以试试 先登录 微信文件传输助手网页版 再去登录网页版  概述 微信浪费电是大家都知道的，但奈何亲朋好友都在用没法换，只能自己另有他寻了，所以有了本教程。使用TG的好处懂得都懂\n需要使用科学上网才能进行登录，Android用户直接挂VPN就可以，购买服务器的可以使用外国服务器，或者国内的服务器给服务器上代理就可以了   本教程声明 Android手机不需要购买服务器\n此教程没有以下功能\n 没有朋友圈 没有红包 不能发语音（可以收听） 不能发位置 类似Web微信 部分文件、图片、表情等多媒体文件会被网页版微信截断，即收不到任何数据， 尤以表情为甚。因此造成的偶发现象，会提醒用户使用移动客户端查看。  目前只有Ubuntu系统能把功能都实现，所以本教程使用Ubuntu系统  需要一点点Linux知识，不会也没有关系，耐心看跟着做就好了  Android用户可以使用Termux安装一个Ubuntu系统就可以了,在Ubuntu进行配置就好了，很完美了！ 关于 Termux 可以直接去下载，完全免费，很省电，耗电量可以忽略不计   Termux安装Ubuntu 更新下软件包：\npkg update 打开软件，输入以下代码按回车：\npkg install wget openssl-tool proot -y \u0026\u0026 hash -r \u0026\u0026 wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh \u0026\u0026 bash ubuntu.sh  输入以下代码进入Ubuntu系统：\n./start-ubuntu.sh  回到本教程，开始搭建TG收发微信消息  先更新系统软件：  apt update \u0026\u0026 apt upgrade -y  下载必要依赖：  apt install ffmpeg python3-pip python3-dev python3-setuptools libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev libmagic-dev -y  安装EH转发机器人和主从通道:   安装EFB：  pip3 install ehforwarderbot  安装TG机器人  pip3 install efb-telegram-master  微信端：  pip3 install git+https://github.com/ehForwarderBot/efb-wechat-slave 现在做完了服务器工作，再去申请一个机器人  打开TG搜索 @botfather 发送 /newbot 创建自已的机器人 给自已的机器人取个称呼（随便取） 给自已的机器人取个用户名，必须是以 bot 结尾（例如Wechatbot）注意可能被人取了就另外再打个bot结尾的名称，必须是英文 创建后你会得到一个API（也可以称 token），复制下来 配置机器人：   输入 /setprivacy 发送，选择你的机器人，点Disable 输入 /setjoingroups 发送，选择你的机器人，点Enable 输入 /setcommands 发送，选择你的机器人，输入以下内容(全部一起发，不是一条条发)还有其他功能自己可以去摸索:  link - 将会话绑定到 Telegram 群组 chat - 生成会话头  返回telegram主界面，搜索按扭🔍，搜索@get_id_bot，进入点开始会得到你的telegram id    服务器上操作或者Termux操作（Android用户一定要在Ubuntu上操作）   下载编辑软件vim：  apt install vim  编辑文件：  vim ~/.ehforwarderbot/profiles/default/config.yaml 进入后点一下键盘 i\n 把以下代码复制进去：  master_channel: blueset.telegram slave_channels: - blueset.wechat  按下键盘的 ESC 再输入英文状态下的 : 输入 wq 后回车，就这样保存文件并退出了 继续输入：  vim ~/.ehforwarderbot/profiles/default/blueset.telegram/config.yaml  按上面的方法复制一下代码进去：  token: \"机器人的API\" admins: [用户ID] 把上面的 机器人API 和 用户ID 换成你刚才在TG用那两个机器人得到的（符号不要改）\n 把 VPN 挂在后台才可以登录 运行登录你的微信 1  ehforwarderbot   一定要用扫码登录，不能用图片导入登录 ","description":"","tags":["TelegramBot","微信"],"title":"Telegram 收发微信消息","uri":"/post/2022-03-20-telegram%E6%94%B6%E5%8F%91%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF.zh-cn/"},{"content":"概述 Notion 和 Obsidian 都有收集网页的功能, Org-mode 自然也有, Org-mode 是调用 Org-protocol 协议使用的, 而插件 Org-protocol-capture-html 是其中能使 Org-protocol 收集的网页更加美观和可视化\n因为很多人都不会都不理解 Org-protocol 和怎么去使用, 以及Org-protocol-capture-html, 说得只是怎么用这个插件, 却没有说怎么配置, 所以才有了本教程.\n相关链接  Org-protocol-capture-html 官网 Org-protocol 协议官网  效果如下 效果如下👇 \n安装 Org-protocol-capture-html 这个插件是不需要配置, 直接安装此插件就可以调用\n请自己按装此插件\n 使用 use-package 安装 手动安装  配置 Org-protocol-capture-html 此插件是调用 org-capture 功能, 请自觉检查如下配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  (server-start) ;; 如果你知道这意味着什么，可以不使用这句， 这句是为了能调用 emacsclientw (require 'org-protocol) (require 's) ;;依赖 ;; 安装 org-protocol-capture-html ;; 如果跟我的不同, 请将下面两行删除 (add-to-list 'load-path \"~/.emacs.d/plugins/org-protocol-capture-html/\") ;; (require 'org-protocol-capture-html) (setq org-capture-templates '( ;;Org-protocol网页收集, 按键 w 调用 (\"w\" \"网页收集\" entry (file \"~/Org/网页收集.org\") \"* [[%:link][%:description]] \\n %U \\n %:initial \\n\") ))   系统安装 org-protocol 如果下面的方法无法安装, 请见官网 👇\n 官网安装 org-protocol 教程  Windows 用户👇  桌面新建 org-protocol.reg 文件, 使用 记事本 软件打开 , 并将以下👇代码放进去并保存, 然后运行安装并给权限 请把下面的 emacsclientw.exe 路径换成你自己的路径  REGEDIT4 [HKEY_CLASSES_ROOT\\org-protocol] @=\"URL:Org Protocol\" \"URL Protocol\"=\"\" [HKEY_CLASSES_ROOT\\org-protocol\\shell] [HKEY_CLASSES_ROOT\\org-protocol\\shell\\open] [HKEY_CLASSES_ROOT\\org-protocol\\shell\\open\\command] @=\"\\\"C:\\\\Programme\\\\Emacs\\\\emacs\\\\bin\\\\emacsclientw.exe\\\" \\\"%1\\\"\" Linux 用户请见 👉 Linux 使用 org-protocl 根据自己使用的浏览器添加书签 关于 org-protocol-capture-html 对不同的 浏览书签 见\n Org-protocol-capture-html 官网  例如 Chrome 在 Chrome 新建 书签  书签名称随便取 书签地址如下👇  1 2 3  javascript:location.href = 'org-protocol:///capture-html?template=w\u0026url=' + encodeURIComponent(location.href) + '\u0026title=' + encodeURIComponent(document.title || \"[untitled page]\") + '\u0026body=' + encodeURIComponent(function () {var html = \"\"; if (typeof window.getSelection != \"undefined\") {var sel = window.getSelection(); if (sel.rangeCount) {var container = document.createElement(\"div\"); for (var i = 0, len = sel.rangeCount; i \u003c len; ++i) {container.appendChild(sel.getRangeAt(i).cloneContents());} html = container.innerHTML;}} else if (typeof document.selection != \"undefined\") {if (document.selection.type == \"Text\") {html = document.selection.createRange().htmlText;}} var relToAbs = function (href) {var a = document.createElement(\"a\"); a.href = href; var abs = a.protocol + \"//\" + a.host + a.pathname + a.search + a.hash; a.remove(); return abs;}; var elementTypes = [['a', 'href'], ['img', 'src']]; var div = document.createElement('div'); div.innerHTML = html; elementTypes.map(function(elementType) {var elements = div.getElementsByTagName(elementType[0]); for (var i = 0; i \u003c elements.length; i++) {elements[i].setAttribute(elementType[1], relToAbs(elements[i].getAttribute(elementType[1])));}}); return div.innerHTML;}()); javascript:location.href = 'org-protocol:///capture-eww-readable?template=w\u0026url=' + encodeURIComponent(location.href) + '\u0026title=' + encodeURIComponent(document.title || \"[untitled page]\");   Firefox 如下 在 Firefox 新建 书签  书签名称随便取 书签地址如下👇  1  javascript:location.href = 'org-protocol://capture-html?template=w\u0026url=' + encodeURIComponent(location.href) + '\u0026title=' + encodeURIComponent(document.title || \"[untitled page]\") + '\u0026body=' + encodeURIComponent(function () {var html = \"\"; if (typeof document.getSelection != \"undefined\") {var sel = document.getSelection(); if (sel.rangeCount) {var container = document.createElement(\"div\"); for (var i = 0, len = sel.rangeCount; i \u003c len; ++i) {container.appendChild(sel.getRangeAt(i).cloneContents());} html = container.innerHTML;}} else if (typeof document.selection != \"undefined\") {if (document.selection.type == \"Text\") {html = document.selection.createRange().htmlText;}} var relToAbs = function (href) {var a = document.createElement(\"a\"); a.href = href; var abs = a.protocol + \"//\" + a.host + a.pathname + a.search + a.hash; a.remove(); return abs;}; var elementTypes = [['a', 'href'], ['img', 'src']]; var div = document.createElement('div'); div.innerHTML = html; elementTypes.map(function(elementType) {var elements = div.getElementsByTagName(elementType[0]); for (var i = 0; i \u003c elements.length; i++) {elements[i].setAttribute(elementType[1], relToAbs(elements[i].getAttribute(elementType[1])));}}); return div.innerHTML;}());   享受使用 👇 使用之前 请把你的 Chrome 或者 Firefox 的 书签 始终可见(比如在你浏览网页选中文字时可以点击你的书签)\n开始使用  打开 Emacs 使用浏览器浏览网页 在网页 选择你想收集的文本 点击你刚才新建的书签, 点击确定授权之类的 回到 Emacs 你会看到你已经收集到的 Capture 自己记得保存 你收集到的会 保存到 ~/Org/网页收集.org 文件中(因为上面的配置保存到这文件， 请按自己需求更改)  如果你有更多的需求, 请自己学习, 因为网上并没有详细的教程使用 org-protocol 所以才有了本教程 祝你使用愉快🤓⚡👉♥️🌹\n","description":"","tags":["Emacs"],"title":"Org-mode 使用 Org-protocol-capture-html 网页收集(Org-protocol 使用)","uri":"/post/2022-01-12-org-protocol-capture-html.zh-cn/"},{"content":"前言 这篇文章并不是想引战, 而是试着去说明这两者的区别, 然后根据自己的需求选择 Vim 还是 Emacs Vin 和 Emacs 各有自己的特点, 我只想把这两者的特点说明以下, 让读者根据自己的需求选择 Vim 还是 Emacs\n编辑习惯   Vim 在于按键的组合,比如你可以配置任何按键组合去触发某些动作,(e.g 你可以在 I 模式 配置 jk 去触发按键  进入 N 模式,然后相当于你没有输入过 jk), 这只是一个例子,反正你能做到全部Vim 能做的,甚至调用插件以及命令.\n  Emacs 做不到上面例子,Emacs 是靠函数触发的或者说你必须 Ctrl+才能实现某些功能(类似Vim 的例子), Emacs 就是一个 Elisp 语言的运行器, 你做的每一个动作都是在触发某个函数(e.g Ctrl+n 触发 next-line 函数将光标移动到下一行)\n  在这一点上显然是 Vim 更方便,因为按键组合真的非常好用,还不影响输入,对于 Emacs 就必须用两个按键同时按下, 这非常麻烦, 所以在按键组合中 Vim 有着非常好的优势, 因为 Emacs 要按 Ctrl 键, 左边小拇指真的难受, 不过 Emacs 也有模拟 Vim 的插件, 但仅仅是只能模拟控制光标和一些命令, 做不到可以设置按键组合触发某些功能!\n  Vim 和 Emacs 设置理念   Vim 类似一把短刀, 只做好一件事, 他仅仅是一个编辑器\n  Emacs 类似一个武器库, 可以做非常多的事, 但都不精, Emacs 有时候被人说做是一个 编辑器系统 我个人感觉还是挺符合的\n  总之 Emacs 比 Vim 做的事多得多, Emacs 是可以查看图片的, 而且现在 Emacs 已经发展到通过插件可以在Emacs进行网页浏览和播放视频了 [类似 Chrome 那种浏览器 ] (e.g EAF 框架)\n  Emacs 的个人笔记管理   如果你有写笔记的习惯, 那么你一定听说过 Markdown 的语法, 我要说的不是Markdown 而是Emacs内置的一个笔记系统 Org-mode.\n  Org-mode 只有在 Emacs 有着非常好的体验, 而在其它编辑软件基本无法发挥 org-mode 的强大\n  Org-mode 的表格可以运算, 代码块可以直接进行运行并返回结果, 捕获(Capture)功能, GTD管理系统(比如 日程安排(可以重复提醒), TODO, 计时器, 导出为其它格式)\n  所以说, 如果你打算使用 Emacs 真的非常多优点, org-mode 有点难学习(和设置), 因为使用 org 之前你的会 Emacs 以及 ELisp语言基础\n  如何选择 Vim 和 Emacs ? 如果你需要很多的功能, 建议你选择 Emacs , 因为 Emacs 是可发展的, 以及可以运行图形界面, 使 GUI 功能 在Emacs成为了可能\nVim 只能查看文本之类的, 图片这些无法处理, 只能通过调用第三方应用才能处理查看 如果你非常需要 GTD 系统之类的, 那么 Emacs 是不二智选, 如果 你只是需要出来文本的,那么Vim更好\nEmacs 如果你使用的非常好, 非常6, 那么你将非常牛逼, 而且我估计你未来时不会再更换编辑器了\n我个人是 Vim —\u003e Emacs —\u003e Vim 还是回到了 Vim\n","description":"","tags":["Vim","Emacs","Neovim"],"title":"Vim和Emacs的选择","uri":"/post/2021-12-27-vim%E5%92%8Cemacs%E7%9A%84%E9%80%89%E6%8B%A9.zh-cn/"},{"content":"概述 使用 Vim 每当我们切换中文输入时都要切换中英文,这非常繁琐还好有Vim 插件了来弥补这个缺点 这个插件就是 ZFVimIM, 这插件支持云输入(云词库), 非常的好用, 而且不影响你使用 jk 切换的到 Normal 模式, 配置也非常简单\n安装 ZFVimIM 安装必要插件 使用Vim Plug 安装 Plug 'ZSaberLv0/ZFVimIM' Plug 'ZSaberLv0/ZFVimJob' \" 可选, 用于提升词库加载性能 Plug 'ZSaberLv0/ZFVimIM_openapi' \"云词库 Plug 'ZSaberLv0/ZFVimIM_pinyin' \"db文件 我是使用 Neovim 以下是我的配置\n\" 云词库支持 let g:ZFVimIM_openapi_enable=1 \" 使用本地 db 的配置 function! s:zfvimim_init() abort let db = ZFVimIM_dbInit({'name' : '中文输入法'}) call ZFVimIM_cloudRegister({ \\ 'mode' : 'local', \\ 'dbId' : db['dbId'], \\ 'repoPath' : expand('~/.config/nvim/plugged/ZFVimIM_pinyin/misc/'), \" 词库路径,就是放下面两个文件的路径 \\ 'dbFile' : 'pinyin.txt', \" 词库文件, 相对 repoPath 的路径 \\ 'dbCountFile' : 'pinyin_count.txt', \" 非必须, 词频文件, 相对 repoPath 的路径 \\ }) endfunction augroup zfvim_conf autocmd! autocmd VimEnter * call s:zfvimim_init() augroup END 安装后使用  ;; 开启或关闭输入法, ;: 切换词库 - 和 = 翻页 空格 和 0~9 选词或组词 [ 和 ] 快速从词组选字 输入过程中会自动组自造词, 也可以用 ;, 或 :IMAdd 手动添加自造词, ;. 或 :IMRemove 删除自造词 觉得好用, 记得给开发者买个煎饼, 贫穷码农在线乞讨 _(:з」∠)_  更多细节请到官方 ZFVimIM\n如果你觉得好用, 希望您能给开发者 买个煎饼 开发者不是我本人\n","description":"","tags":["Vim","Neovim"],"title":"(Neo)Vim 中英文输入法","uri":"/post/2021-12-26-vim%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95.zh-cn/"},{"content":"概述 在如今这个时代每个人都需要做笔记，用来记录一些生活琐事，以及一些重要的事情，避免忘记， 好记性不如烂笔头\n那么用什么软件记笔记呢?一个好的笔记软件可以快速让笔记快速记录。\n笔记软件目前最好用的无非就是那几个，比如:\n Notion Obsidian Logseq Emacs Org-mode RoamResearch  每个笔记都有自己的优缺点，看自己的选择，上面这几款除了 RoamResearch 没用过，其他的我都有用过，所以在此讨论下。\n仅代表个人观点，仅供参考，无实际意义\nNotion Notion 优点  免费 无限Page 大量的模板提供使用 非常的灵活 列表database的使用(e.g. 类似 Excel 的列表，可以自动进行运算) 全平台支持(主要是Web，Window，MacOS，Liux，Android，IOS) Task 使用 日程的安排(有日历，并进行提醒) 每一行都是一个块(非常方便) 可以进行简单的GTD管理 支持Markdown语法 所见既所得 能导出(Markdown,PDF,CSV) 纯文本  Notion 缺点  都是需要联网的，没有离线版(可以离线使用，联网后自动同步，但是上传图片不行) 数据都是保存在Notion官方里 导出功能对中文不友好(中文路径乱码)  对于 Notion 个人建议 如果你需要 多人协同工作 和 列表数据的计算，Notion 将会很适合你\n如果你需要把资料掌握在手了，而且是记录一些永久数据，不建议使用\n这些公司不知道什么时候倒闭，如果你把一些永久保存的资料放上去很不好，导出的时候就很难受了\n不过 Notion 至少可以熬10年，实在是Notion太棒了, 功能强大，界面美观，非常丝滑，令人一上手就不舍得离开，请谨慎使用\nObsidian Obsidian 优点  免费 全平台支持(Window，MacOS，Liux，Android，IOS) 本地存储(也可以使用官方提供的在线存储) 支持Markdown语法 所见即所得(Mobile 端目前没有实现，将来可能实现) 丰富的插件生态 笔记双链 可以配合插件进行绘图 Git进行版本管理(插件提供) 模板捕获 配置可迁移，复制配置目录就可以在全平台使用  Obsidian 缺点  没有像Notion那样的database使用 表格的编辑要安装插件才勉强好用 无法进行GTD使用 要安装一些插件才能使Obsidian更好用  对于 Obsidian 个人建议 个人目前使用的是Obsidian，因为配合插件的使用真的非常好用，而且可以掌控自己的数据，想保存在那就保存在哪。\n 如果你需要自己掌控数据的话这款我觉得是最好的，虽然少了database的使用，但大量的插件可能以后会有人做出来 如果你经常需要捕获某个想法的话这个挺好的 缺点的话就是没有database了，自己看自己需求吧  以下是我个人在Obsidian使用的插件  Calender — 类似日历，点击日历的某天会创建当天的笔记(笔记名是当天的日期) Advance Table — 表格的快速编辑 Dataview — 这个挺好的，类似一个数据库，可以根据自己的筛选所有文件和想要的记录 Excaldram — 绘图插件 Mind Map — 类似思维导图，自动把当前笔记形成思维导图观看 Kanban — 就是看板 Remember cursor position — 记录你查看笔记的位置 Templater — 模板的捕获，这个需要自己的配置 Dayplany — 查看自己的任务时间线  Emacs Org-mode 大名鼎鼎的Emacs，Org-mode是真的非常强大，Org-mode类似Markdown也是一种语法，Org-mode可以做GTD管理个人的任务\nOrg-mode的强大是背靠Emacs的生态，缺点也因为是背靠Emacs难以在其他地方很好的使用\n如果你喜欢折腾，那么Org-mode真的是非常好的，不过学习Org-mode之前你就要会简单使用Emacs\n如果你是普通人，可以忽略Org-mode，因为Org-mode是真的难以熟练，因为你要配置Emacs和Org-mode的插件，并且org-mode只有在Emacs有比较好的体验，当然如果你真的会了你就会看不上其他的了。其他笔记能做的，Org-mode也能做，其他笔记不能做的，Org-mode也能做\nOrg-mode 优点  全平台支持(Window，MacOS，Liux，没有Android，IOS。Android可以在Termux使用) GTD管理(日程，Tasks) — 这方面真的很强很强很强 表格可以自己使用算法进行计算 文本编程(可以直接执行代码并返回结果) 纯文本 丰富的生态插件 双链(插件 Org-Roam 提供) 不会落伍，因为Emacs是可扩展的，像双链一样Org-mode是没有双链的，是由开源社区的人开发的插件补上的 加密文本 捕获模板(可能是在笔记软件中功能最强大和功能最全得了) 导出功能好(PDF,html,Latx,Markdown)  Org-mode 缺点  移动端没有好的体验 只在Emacs有好的体验  对于Emacs Org-mode 个人建议 如果你需要在移动端使用就不建议了，电脑的会是非常好的体验\n但是将来会不会完美的迁移到移动端不好说 强大的人会非常适合，会收益终身的，因为你以后不会再找其他笔记软件了\nLogseq Logseq 优点  支持Org-mode，Markdown语法 Windows，MacOS，Linux 移动端(正在开发) 双链  对于 Logseq 个人建议 由于个人并没有深入使用，不过多评价，不过看见很多人都说好，估计是不错的，因为Logseq和Notion，Obsidian，Emacs可以相互对比的\nRoamResearch 最近非常热门，本人没有使用过，因为付费的，听说双链之类的做的很好，可以使用一下\n总结 希望大家根据自己的需求选择，本人只是给出一些功能参考\n","description":"","tags":["Emacs","笔记"],"title":"Notion,Obsidian,Org-mode,Logseq,RoamResearch,笔记软件的选择","uri":"/post/2021-12-25-%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%80%89%E6%8B%A9.zh-cn/"}]
