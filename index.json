[{"categories":[],"contents":"一个混迹于帝都的程序猿，主要从事Java、Python和Golang相关的开发工作。\n编程领域  Java，主要用它进行web开发 Python，主要用它进行网络爬虫开发和web开发 Golang,个人业余爱好 MySQL、MongoDB HTML、Javascript、jQuery、CSS  \n个人信息 教育信息  中国矿业大学 (2006.9-2010.6) 计算机科学与技术 (本科)  自我评价  热爱学习和使用新技术； 有着十分强烈的代码洁癖； 喜欢重构代码，善于分析和解决问题；  个人爱好  编程 英语 学习  联系方式  Email: lucumt@gmail.com,cumtlu@126.com Skype: lu.rosen QQ: 317801876 领英: 卢运强  友情链接  Frantic log#1048 cold\u0026rsquo;s world 邪恶二进制 Javmain\u0026rsquo;s Blog 小林Coding 云原生实验室  ","permalink":"http://localhost:1313/about/","tags":[],"title":"关于我"},{"categories":[],"contents":" 记录个人觉得有意义的各种博客、公众号页面、视频等。\n 博客园    地址 内容 其它     程序员自由之路 主要是JavaEE开发，关于Java框架的文章很多    Michael翔 主要是JavaEE开发 微信公众号Coder 魔法院   秋风飒飒吹 软件开发的各方面均有涉及    Ccww 主要是Java和Spring框架     简书 单个博文  docker安装Elasticsearch7.6集群并设置密码  ","permalink":"http://localhost:1313/links/","tags":[],"title":"各种外链"},{"categories":[],"contents":"","permalink":"http://localhost:1313/search/","tags":[],"title":"搜索结果展示"},{"categories":["个人博客"],"contents":"记录下个人Hugo博客使用Even主题时的一些使用心得与个人改进。\nGitHub Actions自动部署 参见利用GitHub Action实现Hugo博客在GitHub Pages自动部署。\n改进Back to top 背景 原始的返回顶部按钮太小且背景提示色不明显，查看起来不直观。\n修改代码 在assets/sass/_partial/_back-to-top.scss中修改如下配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  .back-to-top { display: none; transition-property: transform; transition-timing-function: ease-out; transition-duration: 0.3s; z-index: 10; background-color: $content-blockquote-backgroud; position: fixed; right: 10px; bottom: 10px; height: 30px; width: 50px; text-align: center; padding-top: 20px; border-radius: 20%; overflow: hidden; \u0026amp;:hover { transform: translateY(-5px); } .icon-up { vertical-align: top; } }   运行效果 改进后的效果如下所示，不仅按钮变大，而且也能根据不同的主题颜色动态的进行改变。\n其它 在assets/sass/_partial/_back-to-top.scss中有如下代码用于控制此按钮只有在非手机浏览器的环境下显示，此方式可用于其它需要在手机浏览器环境禁用的场景。\n1 2 3 4 5  @includemax-screen() { .back-to-top { display: none !important; } }   区分Draft与非Draft 背景   有时候会遇到一些典型场景或者灵感突发，想把它们写入博客中，但由于时间限制一时半会又难以完成，可创建对应的markdown文件，将draft设置为true，然后在正常打包时即可排除这些草稿文章，在本地编写时可用类似hugo server -w -D的指令来包含草稿文章。\n  当采用hugo server -w -D时在文章列表中不会显示是否为草稿文章，使用上有些不方便\n  修改代码   测试assets/sass/_partial/_archive.scss添加如下代码\n1 2 3  .archive-post-status { color: $theme-color; }     layouts/_default/section.html中添加如下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;span class=\u0026#34;archive-post-time\u0026#34;\u0026gt; {{ $element.Date.Format \u0026#34;01-02\u0026#34; }} \u0026lt;/span\u0026gt; \u0026lt;!-- show draft status in none production environment --\u0026gt; {{- if not (in (slice (getenv \u0026#34;HUGO_ENV\u0026#34;) hugo.Environment) \u0026#34;production\u0026#34;) -}} \u0026lt;span class=\u0026#34;archive-post-status\u0026#34;\u0026gt; {{ if .Draft }} \u0026amp;#9711; {{ else }} \u0026amp;#9632; {{ end }} \u0026lt;/span\u0026gt; {{ end }} \u0026lt;span class=\u0026#34;archive-post-title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ $element.RelPermalink }}\u0026#34; class=\u0026#34;archive-post-link\u0026#34;\u0026gt; {{ .Title }} {{ .Title }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;     layouts/_default/taxonomy.html中添加如下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;span class=\u0026#34;archive-post-time\u0026#34;\u0026gt; {{ .Date.Format (.Site.Params.dateFormatToUse | default \u0026#34;2006-01-02\u0026#34;) }} \u0026lt;/span\u0026gt; \u0026lt;!-- show draft status in none production environment --\u0026gt; {{- if not (in (slice (getenv \u0026#34;HUGO_ENV\u0026#34;) hugo.Environment) \u0026#34;production\u0026#34;) -}} \u0026lt;span class=\u0026#34;archive-post-status\u0026#34;\u0026gt; {{ if .Draft }} \u0026amp;#9711; {{ else }} \u0026amp;#9632; {{ end }} \u0026lt;/span\u0026gt; {{ end }} \u0026lt;span class=\u0026#34;archive-post-title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34; class=\u0026#34;archive-post-link\u0026#34;\u0026gt; {{ .Title }} {{ .Title }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;     运行效果 部署时才添加访问统计 背景 在本地编写博客时，需要多次访问未完成的页面，此种页面没必要添加记录到网站访问次数统计中。\n修改代码 在layouts/partials/scripts.html中修改如下，在最外层添加 if (in (slice (getenv \u0026quot;HUGO_ENV\u0026quot;) hugo.Environment) \u0026quot;production\u0026quot;)来判断环境\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  \u0026lt;!-- only work in production mode --\u0026gt; {{- if (in (slice (getenv \u0026#34;HUGO_ENV\u0026#34;) hugo.Environment) \u0026#34;production\u0026#34;) -}} \u0026lt;!-- Analytics --\u0026gt; {{- if .Site.GoogleAnalytics -}} {{ template \u0026#34;_internal/google_analytics_async.html\u0026#34; . }} {{- end -}} {{- with .Site.Params.baiduAnalytics -}} \u0026lt;script id=\u0026#34;baidu_analytics\u0026#34;\u0026gt; var _hmt = _hmt || []; (function() { if (window.location.hostname === \u0026#39;localhost\u0026#39;) return; var hm = document.createElement(\u0026#34;script\u0026#34;); hm.async = true; hm.src = \u0026#34;https://hm.baidu.com/hm.js?{{.}}\u0026#34;; var s = document.getElementsByTagName(\u0026#34;script\u0026#34;)[0]; s.parentNode.insertBefore(hm, s); })(); \u0026lt;/script\u0026gt; {{- end }} \u0026lt;!-- baidu push --\u0026gt; {{- if .Site.Params.baiduPush -}} \u0026lt;script id=\u0026#34;baidu_push\u0026#34;\u0026gt; (function(){ if (window.location.hostname === \u0026#39;localhost\u0026#39;) return; var bp = document.createElement(\u0026#39;script\u0026#39;); bp.async = true; var curProtocol = window.location.protocol.split(\u0026#39;:\u0026#39;)[0]; if (curProtocol === \u0026#39;https\u0026#39;) { bp.src = \u0026#39;https://zz.bdstatic.com/linksubmit/push.js\u0026#39;; } else { bp.src = \u0026#39;http://push.zhanzhang.baidu.com/push.js\u0026#39;; } var s = document.getElementsByTagName(\u0026#34;script\u0026#34;)[0]; s.parentNode.insertBefore(bp, s); })(); \u0026lt;/script\u0026gt; {{- end }} {{- end -}}   使用方式 在项目部署时通过添加-e \u0026quot;production\u0026quot;来指定为生产环境，如hugo -b \u0026quot;https://lucumt.info/\u0026quot; -e \u0026quot;production\u0026quot;。\nFork me on Github 原始代码来源https://github.com/olOwOlo/hugo-theme-even/pull/4121，参考代码见如何在博客园添加 Fork me on GitHub 彩带效果\n修改代码   config.toml中添加如下配置，若ithubForkURL值为空，则不显示Fork me on GitHub\n1 2 3  [params] githubForkURL = \u0026#34;\u0026#34; # Fork me on Github repository address # Fork me on Github仓库地址     layouts/_default/baseof.html中添加如下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13  {{ with .Site.Params.githubForkURL }} \u0026lt;!-- fork me on github ---\u0026gt; \u0026lt;!-- see https://github.blog/2008-12-19-github-ribbons/ --\u0026gt; \u0026lt;a href=\u0026#34;{{ . }}\u0026#34; title=\u0026#34;{{ . }}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img style=\u0026#34;position: fixed; top: 0; right: 0; border: 0; z-index:9999;\u0026#34; src=\u0026#34;/forkme_right_gray.png\u0026#34; alt=\u0026#34;Fork me on GitHub\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; {{ end }} \u0026lt;!-- 在此代码块之前添加 --\u0026gt; \u0026lt;main id=\u0026#34;main\u0026#34; class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content-wrapper\u0026#34;\u0026gt;     static目录下添加一个名为forkme_right_gray.png的图片，\n  运行效果 代码块可复制 原始代码来源https://github.com/olOwOlo/hugo-theme-even/pull/413\n修改代码   config.toml中添加如下配置，用于控制是否开启代码复制功能\n1 2  [params] enableCopyCode = true     assets/sass/_partial/_post/_code.scss添加如下代码\n1 2 3 4 5 6 7 8 9 10 11 12  .copy-code { position: absolute; right: 0; z-index: 2; font-size: .9em !important; padding: 0px 1.5rem !important; color: #b1b1b1; font-family: Arial; font-weight: bold; cursor: pointer; user-select: none; }     在layouts/partials/scripts.html底部添加如下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  \u0026lt;!-- copy to clipboard --\u0026gt; {{- if .Site.Params.enableCopyCode -}} \u0026lt;script\u0026gt; function createCopyButton(highlightDiv) { const div = document.createElement(\u0026#34;div\u0026#34;); div.className = \u0026#34;copy-code\u0026#34;; div.innerText = \u0026#34;Copy\u0026#34;; div.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; copyCodeToClipboard(div, highlightDiv) ); addCopyButtonToDom(div, highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { const codeToCopy = highlightDiv.querySelector(\u0026#34;:last-child \u0026gt; .chroma \u0026gt; code\u0026#34;) .innerText; await navigator.clipboard.writeText(codeToCopy); button.blur(); button.innerText = \u0026#34;Copied!\u0026#34;; setTimeout(() =\u0026gt; button.innerText = \u0026#34;Copy\u0026#34;, 2000); } function addCopyButtonToDom(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\u0026#34;div\u0026#34;); wrapper.className = \u0026#34;highlight-wrapper\u0026#34;; highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent); if(!isMobile){ document.querySelectorAll(\u0026#34;.highlight\u0026#34;).forEach((highlightDiv) =\u0026gt; createCopyButton(highlightDiv)); } \u0026lt;/script\u0026gt; {{ end }}     运行效果 在非手机浏览器中当开启enableCopyCode开关后，在代码左侧会出现如下效果2\n添加搜索功能 修改代码 此部分的代码主要参考给hugo添加搜索功能基于fuse实现的，由于基于此博文实现的搜索效果展示比较简陋，故个人做了如下改进:\n  在layouts/_default/search.html下添加了，用于将搜索结果用博客默认的风格包装起来\n1  {{ define \u0026#34;main\u0026#34; }} … {{ end }}     在layouts/_default/baseof.html实现前述步骤中相关的定义\n1 2 3 4 5 6 7 8 9 10  {{ block \u0026#34;main\u0026#34; . }} \u0026lt;main id=\u0026#34;main\u0026#34; class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content-wrapper\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34; class=\u0026#34;content\u0026#34;\u0026gt; {{ block \u0026#34;content\u0026#34; . }}{{ end }} \u0026lt;/div\u0026gt; {{ partial \u0026#34;comments.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }}     在assets/sass/_base.scss添加下述样式，用于分隔显示不同的检索结果\n1 2 3 4 5 6 7  #search-results-info { display: none; } .search_list { border-top: $post-border; }     运行效果3   默认的搜索界面\n  输入关键字后，有显示结果的界面\n    截至本文编写时(2022年9月)Even主题的作者尚未merge这些pull request\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 此部分的提示文字采用硬编码copy，尚未做成通用的国际化代码\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 由于分词的原因，中文检测结果可能存在一定误差\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"http://localhost:1313/post/hugo/share-experience-for-using-hugo-even-theme/","tags":["hugo","Go"],"title":"个人Hugo博客关于Even主题的一些使用改进"},{"categories":["个人博客"],"contents":"作为一名IT民工，善于利用各种工具提升工作效率才算合格，本文简单记录自己如何利用GitHub Actions实现个人Hugo博客在GitHub Pages中的自动化部署。\n传统方式 自己的个人博客创建于2016年，在这期间自己一直基于如下方式创建并部署更新博客：\n  利用hugo命令创建对应的博客markdown文件\nhugo new post/hugo/using-github-action-to-auto-build-deploy.md\n  利用下述命令开启hugo博客的动态监听展示，并进行编写\nhugo server -w -D\n  博客内容编写完成后，利用下述命令将其切换到实际部署环境\nhugo server --baseUrl=\u0026quot;https://lucumt.info/\u0026quot; --watch=false --appendPort=false --renderToDisk --environment production\n  执行下述命令提交到master分支\n git add -A git commit -a -m \u0026quot;xxxx\u0026quot; git push origin master    利用下述命令将public目录中的内容从master 分支同步到gh-pages分支\ngit subtree push --prefix=public git@github.com:lucumt/ghblog.git gh-pages\n  上述过程中的1,2,4阶段是编写博客的必经阶段，而3,5阶段其实没太多必要，完全可以用工具自动化实现。作为IT从业者，我们需要尽可能的减少不必要的操作。\n改进方式 结合网络上的相关资料，自己把实现方案定在了GitHub Actions和Travis CI二者之一，考虑到GitHub中已经内置了GitHub Actions ，最终解决采用其作为实现方案。\n在Hugo的官方文档Build Hugo With GitHub Action中也推荐采用GitHub Actions作为持续集成部署方案，并提供了相应的流水线配置代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  name:github pageson:push:branches:- main # Set a branch to deploypull_request:jobs:deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;# extended: true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3if:github.ref == \u0026#39;refs/heads/main\u0026#39;with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./public  该配置代码已经很完善，个人根据实际情况对其做了如下修改：\n 在Build阶段，将hugo命令改为适合个人环境的hugo -b \u0026quot;https://lucumt.info/\u0026quot; -e \u0026quot;production\u0026quot; 在个人GitHub中设置github_token  其中关于github_token的配置可按如下步骤配置：\n  在个人GitHub页面，依次点击Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens进入如下页面：\n  点击Generate new token出现如下界面，在Note中输入名称，在Select scopes选择workflow\n  将生成的token复制出来为后续创建secret做准备，注意必须及时复制，一旦离开此页面后续就无法查看其值，只能重新创建新token：\n  进入对应的GitHub项目下，依次点击Settings-\u0026gt;Secrets-\u0026gt;Actions进入添加Action secrets的界面，点击New repository secret按钮\n  在出现的界面中name部分输入我们设置的值，Secret部分输入步骤3中记录的token值，然后点击Add secret按钮\n需要注意的是name的值不能以GITHUB_开头，否则创建会出错\n  在流水线中将github_token值设置为步骤5中secret的名称，类似${{ secrets.GH_PAGE_ACTION_TOKEN }}s，至此github_token设置过程完毕。\n  配置后完整的流水线代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  name:pages-auto-build-deployon:# workflow_dispatch: push:branches:- masterjobs:build-and-deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2with:submodules:truefetch-depth:0- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.100.2\u0026#39;extended:true- name:Build Hugorun:hugo -b \u0026#34;https://lucumt.info/\u0026#34; -e \u0026#34;production\u0026#34;- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GH_PAGE_ACTION_TOKEN }}publish_dir:./publiccommit_message:${{ github.event.head_commit.message }}  将该yaml文件放到对应GitHub项目下的.github/workflows目录下即完成全部配置。\n当执行git push origin master后，GitHub Actions会开启自动构建部署，运行结果如下，至此整个设置过程完毕！\n其它 由于GitHub Action支持定时语法，将流水线触发条件修改如下\n1 2 3 4 5 6 7  on:push:branches:- masterschedule:# Runs everyday at 8:00 AM- cron:\u0026#34;0 8 * * *\u0026#34;  可实现每天上午8点自动触发构建，由于构建过程中会往gh-pages分支下提交代码，从而间接达成在GitHub中每天提交代码，在GitHub主页面展示时保持全绿的功能！1\n参考文档:\n https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/    个人观点质量优于数量，不推荐这么做\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"http://localhost:1313/post/hugo/using-github-action-to-auto-build-deploy/","tags":["hugo","github-pages","go"],"title":"利用GitHub Action实现Hugo博客在GitHub Pages自动部署"},{"categories":["个人博客"],"contents":"自己一直特别羡慕博客园上某些博主的博文样式（如武培轩,JavaGuide)，这些博文样式第一眼看起来就很清爽,让人很有阅读的欲望，而我总感觉自己博客的样式特丑陋。即使不关注内容，只看排版布局和样式，有时候自己写完一篇文章自己都不想去看，何况别人！\n终于有一天我受不了自己的博客样式，决定对其升级一版，在这个过程中发现个人采用的博客主题Even功能很强大，基于上没做啥修改就达到了自己想要的效果，特此记录下。\n风格对比 个人博客基于Golang语言开发的Hugo最开始是采用hugo-redlounge主题来实现的，经过一段时间的使用之后感觉hugo-redlounge主题功能不丰富且左侧会固定占用一部分宽度来展示个人信息，而这部分其实并无太大意义，故后来将其切换为如今的Even样式。\n  hugo-redlounge主题的博客：\n  Even主题的博客\n  Even主题的代码和引用样式\n  切换后虽然相对于与hugo-redlounge主题当前博客的功能和界面美观性有一定提升，但是和博客园中的博文样式比起来直观感觉还是有一定差距，尤其是在包含代码段时淡黄色的背景看起来略微不舒服(如上图)。\n源码分析 个人对于Even主题最不满意的是在显示代码段时其样式不太符合自己预期，在浏览器中分析代码段对应的CSS样式，可看出是由如下CSS代码控制的：\n1 2 3 4 5 6  .post .post-content code, .post .post-content pre { padding: 7px; font-size: .9em; font-family: Consolas,Monaco,Menlo,dejavu sans mono,bitstream vera sans mono,courier new,monospace; background: #f8f5ec; }   分析Even主题的源码后发现其主要是基于Sass框架通过_code.scss和_content.scss联合实现的，其中背景设置是通过background: $code-background;实现\n由于Sass支持通过变量来动态的设置CSS属性值，故$code-background显然也是一个变量，查看源码后发现其在_variables.scss中有如下定义:\n1 2  // Color of the code background. $code-background: $deputy-color !default;   在_variables.scss中继续查找$deputy-color的定义，可找出在该文件开头有如下代码，其中$deputy-color是通过$theme-color-config在$theme-color-map中查找相关的颜色设置，自己博客之前默认淡黄色的代码块样式就是通过Default样式设置的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  // ============================== // Variables // ==============================  // ========== Theme Color ========== // // Config here to change theme color // Default | Mint Green | Cobalt Blue | Hot Pink | Dark Violet $theme-color-config: \u0026#39;Mint Green\u0026#39;; // Default theme color map $theme-color-map: ( \u0026#39;Default\u0026#39;: #c05b4d #f8f5ec, \u0026#39;Mint Green\u0026#39;: #16982B #f5f5f5, \u0026#39;Cobalt Blue\u0026#39;: #0047AB #f0f2f5, \u0026#39;Hot Pink\u0026#39;: #FF69B4 #f8f5f5, \u0026#39;Dark Violet\u0026#39;: #9932CC #f5f4fa ); // Check theme color config. // if it does not exist, use default theme color. @if not(map-has-key($theme-color-map, $theme-color-config)) { $theme-color-config: \u0026#39;Default\u0026#39;; } $theme-color-list: map-get($theme-color-map, $theme-color-config); // Default theme color of the site. $theme-color: nth($theme-color-list, 1) !default; // Deputy theme color of the site. $deputy-color: nth($theme-color-list, 2) !default;   进一步分析后发现$deputy-color在_variables.scss中的多个地方都有使用，从而可以确定通过修改$theme-color-config的值就能达到动态更改博客主题样式的目的。\n1 2 3 4 5 6 7 8 9 10 11  // Deputy theme color of the site. $deputy-color: nth($theme-color-list, 2) !default; // Backgroud color of the post toc. $post-toc-backgroud: rgba($deputy-color, 0.6) !default; // Border color of the table. $content-table-border-color: darken($deputy-color, 3%) !default; // Color of the code background. $code-background: $deputy-color !default;   样式修改 由于SCSS文件需要编译成CSS文件后才能被使用，而Hugo默认版本是不支持SCSS编译的，故需要下载Hugo Extended版本\n下载完毕后，需将其添加到环境变量，其各种指令的用法与默认版Hugo的用法相同，根据实际情况在_variables.scss中修改$theme-color-config的值，然后调用hugo server -w -D等命令即可实时展示修改效果。\n结果展示 Default样式 Mint Green样式 Cobalt Blue样式 Hot Pink样式 Dark Violet样式 扩展 可根据个人喜好在_variables.scss动态的添加自己喜欢的颜色配置\n1 2 3 4 5 6 7 8 9 10 11 12 13  // ========== Theme Color ========== // // Config here to change theme color // Default | Mint Green | Cobalt Blue | Hot Pink | Dark Violet $theme-color-config: \u0026#39;Mint Green\u0026#39;; // Default theme color map $theme-color-map: ( \u0026#39;Default\u0026#39;: #c05b4d #f8f5ec, \u0026#39;Mint Green\u0026#39;: #16982B #f5f5f5, \u0026#39;Cobalt Blue\u0026#39;: #0047AB #f0f2f5, \u0026#39;Hot Pink\u0026#39;: #FF69B4 #f8f5f5, \u0026#39;Dark Violet\u0026#39;: #9932CC #f5f4fa );   致谢  https://github.com/olOwOlo/hugo-theme-even https://github.com/ahonn/hexo-theme-even ","permalink":"http://localhost:1313/post/hugo/change-hugo-style-in-even-theme/","tags":["hugo","Go"],"title":"在Hugo生成的博客中动态的修改样式"},{"categories":["个人博客"],"contents":"越来越多的网站和个人博客都变成 HTTPS ，而自己的博客一直都是用的是 HTTP 协议，作为一个具有强迫症的人，每次用 Chrome 浏览器打开个人博客时看见浏览器地址栏显示的都感觉很不舒服。趁着前段时间不太忙，将个人博客从HTTP迁移到了HTTPS ，先记录下。\n一开始我想直接通过在 GoDaddy 上直接购买HTTPS 服务来实现，去官网查看后发现费用太高，一年大约100美刀，果断弃之。 Google后发现很多人都用Cloudflare通过转发请求来实现HTTPS访问，操作起来也很快，自己便也采用Cloudflare实现， 本文主要是基于Cloudflare 的实现说明。\n操作过程 给博客添加自定义域名 本人使用的是GoDaddy来设置自定义域名，具体操作请参见 利用GoDaddy配置自定义域名， 核心的操作就是给CNAME 文件添加Github Pages给出的两条A记录IP地址，此处不再详述。\n利用Cloudflare修改DNS服务器  打开Cloudflare官网注册一个Cloudflare 账户。注册成功之后，点击页面右上角的add site 链接，添加一个网站，在下图输入框中输入自己的域名，点击 Begin Scan 按钮开始扫描。\n 扫描完毕后点击 Contiue Setup ，在类似如下图所示的界面中选择Free Website，然后点击页面底部的Continue按钮。\n 在下图所示的Cloudflare Nameservers说明界面中根据要求来修改自定义域名的DNS服务器。  登录GoDaddy，打开响应域名的Manage DNS界面，将Nameservers从Default修改为Custom 然后添加前一个步骤中的两个值分别加上并点击保存。\n 回到Cloudflare网站，点击Overview按钮，查看域名的状态是否为如下所示的Active，若是则表示DNS服务器修改成功，若不是 Active请等待几分钟。\n  Cloudflare中开启HTTPS设置  在Cloudflare网站上点击顶部的Crypto按钮，将状态修改为Full。\n 在顶部切换到Page Rules界面，点击Create Page Rule ，添加规则http://lucumt.info/* 并选择Always Use HTTPS来强制该域名下的所有请求都是用HTTPS实现，然后点击Save and Deploy来部署该规则，注意此处的规则是HTTP 而不是HTTPS 。\n执行完这一步后理论上通过HTTPS可以正常的访问个人博客，但还需对博客源码做一些修改。  将代码中所有HTTP修改为HTTPS 在执行完前面的步骤后，在浏览器中用HTTPS访问个人博客时，可能看到的还是而不是自己期望中的小绿锁，同时浏览器控制台可能会出现类似Mixed Content,The page at ...,The request has been blocked,the content must be serverd over HTTPS的错误信息。其原因是由于某些页面中存在混合内容，即部分请求还是以HTTP方式实现的，如加载 JavaScript ,CSS 等，解决方法也很简单，将所有的HTTP请求都改为HTTPS即可 。\n以我个人基于Hugo的博客为例，要进行如下几步操作：\n  将个人Hugo源代码中所有的HTTP 请求都修改为HTTP,包括页面中的直接请求和 JavaScript 、CSS等文件中的间接请求。\n  利用 hugo server -D --baseUrl=\u0026quot;https://lucumt.info\u0026quot; --appendPort=false 重新生成基于HTTPS的源文件页面。\n将生成的博客源代码重新上传到 Github 仓库中，经过1分钟左右以HTTPS的方式在浏览器中打开个人博客，期待中的小绿锁入愿出现，世界终于和谐了！\n  注意事项 通过Cloudflare虽然可以快速的将自己的个人博客迁移到HTTPS，但基于以下两个方面的原因，在条件许可的情况下还是应该使用其他方式实现HTTPS:\n 免费计划下的Cloudflare实际上相当于一个中介，我们的访问请求先被Cloudflare代理实现HTTPS 接收到然后将其转发给原始的服务器（如 Github Pages 服务器）。虽然浏览器与Cloudflare之间的通信是HTTPS加密，但是Cloudflare与实际服务器之间的通信不一定是加密的，存在被挟持和篡改的可能。Cloudflare之前也被爆出过 安全漏洞和敏感数据泄露，故商业网站通常不用Cloudflare免费计划，但个人博客出于增加搜索引擎收录和省钱等原因，可以使用Cloudflare免费计划。\n 由于经过Cloudflare这层代码，访问速度肯定没有直接访问原始服务器那么快，对于响应速度要求高的用户不合适。 由于众所周知的原因，在天朝Cloudflare访问速度比国内慢，而且指不定哪天就被ban了。  利用Github Page原生HTTPS Github从2018年5月份开始支持自定义域名使用HTTPS1，具体操作说明请参见securing-your-github-pages-site-with-https，通过此种方式可以绕过Cloudflare作为中间层的问题，但是仍然无法解决由于qiang存在导致的访问缓慢的问题。\n由于自己之前采用的是Cloudflare，按照Github的官方文档进行操作时，在进行DNS检查时一开始会提示如下信息\n利用dig命令检查后结果如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  [root@vm-16-6-centos ~]# dig +noall +answer lucumt.info lucumt.info. 60 IN A 185.199.110.153 lucumt.info. 60 IN A 185.199.111.153 lucumt.info. 60 IN A 185.199.108.153 lucumt.info. 60 IN A 185.199.109.153 [root@vm-16-6-centos ~]# dig www.lucumt.info +nostats +nocomments +nocmd ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.9 \u0026lt;\u0026lt;\u0026gt;\u0026gt; www.lucumt.info +nostats +nocomments +nocmd ;; global options: +cmd ;www.lucumt.info. IN A www.lucumt.info. 2280 IN CNAME lucumt.github.io. lucumt.github.io. 2280 IN A 185.199.109.153 lucumt.github.io. 2280 IN A 185.199.111.153 lucumt.github.io. 2280 IN A 185.199.110.153 lucumt.github.io. 2280 IN A 185.199.108.153 [root@vm-16-6-centos ~]#   发现已经切换过来，并且通过浏览器也能以HTTPS的方式正常访问，就是DNS检查结果一直失败，虽然不影响使用，但对于一个有强迫症的人来说页面上有一项检查失败还是很难受的。\n给Github官方发送Support Request后很快收到了回复2，原因为Cloudflare的缓存还没有清除干净，等待2-3后即可恢复正常。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $ dig NS lucumt.info ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.3-P4-Debian \u0026lt;\u0026lt;\u0026gt;\u0026gt; NS lucumt.info ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 9195 ;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;lucumt.info. IN NS ;; ANSWER SECTION: lucumt.info. 23305 IN NS anirban.ns.cloudflare.com. lucumt.info. 23305 IN NS angela.ns.cloudflare.com. ;; Query time: 0 msec ;; SERVER: 10.127.5.10#53(10.127.5.10) ;; WHEN: Thu Jan 19 18:28:08 PST 2023 ;; MSG SIZE rcvd: 100   根据官方人员的反馈等待2-3天后再次检查，发现DNS检查通过!\n参考:\n https://bakumon.me/blog/p/github-pages-https-ssl.html https://help.github.com/articles/securing-your-github-pages-site-with-https/    https://github.blog/2018-05-01-github-pages-custom-domains-https/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://support.github.com/ticket/personal/0/1974028\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"http://localhost:1313/post/hugo/migrate-github-blog-from-http-to-https/","tags":["Github Pages","HTTPS"],"title":"将基于Github Pages的自定义域名博客迁移到HTTPS"},{"categories":["Go编程","个人博客"],"contents":"一直以来都想拥有一个属于自己的博客，前段时间在学习Go ，于是利用Hugo 和Github Pages 搭建了一个简易的个人博客，先简单记录下。\n环境准备  Go1.18.3+ Hugov0.100+ Github账号 GoDaddy域名  过程概要 在Github上创建一个自己的项目  在Github上创建一个项目，本文中该项目名为blog\n 由于Github Pages强制要求在托管博客时该项目必须有一个名为gh-pages的分支，所以要预先给该项目创建一个名为gh-pages的分支 在Github中打开blog项目主页面，点击 Settings按钮\n在 Github Pages这个区域可以看见本项目的发布链接为https://fox321.github.io/blog/ ，点击该链接可以访问该项目对应的静态页面\n  利用Hugo作为博客生成器 由于Github Pages只支持静态的HTML页面托管，所以需要采用Jekyll 、Logdown 等静态博客生成器来快速生成HTML页面，避免纯手动编写时的费时费力。由于自己近期一直在学习Go，为了加深自己对于Go的运用，于是便选择 Hugo作为自己的博客生成器。 Hugo是一个基于Go开发的静态生成器，它采用Markdown语法来编写博客生成，然后生成相应的HTML页面。\n安装Go 访问Golang下载页根据自己电脑的操作系统选择是Linux版本或Windows版本，同时注意是选择32位还是64位，一定要与自己的操作系统相匹配。以我自己的64位win7系统为例，安装过程如下：\n  下载Go安装文件\n  双击安装，默认是安装在C盘下，由于windows操作系统的特性，我通常不倾向于安装在C盘，故需要设置PATH、GOPATH和GOROOT这三个环境变量，我自己把Go安装在D:\\code\\go下，这三个变量相应的设置为:\n1 2 3  PATH=\u0026#39;D:\\code\\go\\bin\u0026#39;;%PATH% GOPATH=\u0026#39;D:\\code\\gopath\u0026#39; GOROOT=\u0026#39;D:\\code\\go\u0026#39;、     安装完成之后，重新打开cmd窗口，输入go version之后按Enter键，若出现如下信息，则表示Go安装成功\n1 2  C:\\Users\\Administrator\u0026gt;go version go version go1.18.3 windows/amd64     安装Hugo Hugo的安装过程与Go的类似.\n  首先在Hugo下载页根据自己操作系统的类型和位数下载相应的安装包，然后设置对应的PATH环境变量即可。我的安装在 D:\\program\\hugo所以相应的环境变量设置为\n1  PATH=\u0026#39;D:\\program\\hugo\u0026#39;;%PATH%     重新打开cmd窗口，输入hugo version，若出现如下信息，则表示 Hugo安装成功\n1 2  C:\\Users\\Administrator\u0026gt;hugo version hugo v0.100.2-d25cb2943fd94ecf781412aeff9682d5dc62e284+extended windows/amd64 BuildDate=2022-06-08T10:25:57Z VendorInfo=gohugoio     关于Hugo的基本操作命令，可以参见Hugo快速入门，此处不再详述。\n在Github Pages上托管Hugo 安装命令 虽然官方文档在Github Pages上托管Hugo上有相应的说明,个人总感觉其说明信息不够详细，故将自己的实现过程记录如下：\n 将之前在Github上创建的blog项目clone到本地目录\n 切换到blog目录并利用hugo new site命令创建一个名为person_blog的Hugo站点，然后将其内容移入到blog目录下并删除 person_blog目录\n 利用hugo new命令创建一个md文件用于存储我们的第一篇博客\n 在 blog 目录下创建一个名为themes的文件夹用于存储Hugo样式，并将自己选中的样式下载到本地\n 输入hugo server --theme=hugo-redlounge --buildDrafts在本地启动Hugo，启动正常后命令行输出如下\n此时在浏览器中输入http://127.0.0.1:1313会看到如下输出，该页面意味着本地博客创建成功，接下来要将其上传到Github Pages中托管  我们需要将相关的链接地址修改为https://fox321.github.io/blog，同时将端口号去掉，相关的命令为 hugo server -D --theme=hugo-redlounge --baseUrl=\u0026quot;https://fox321.github.io/blog\u0026quot; --appendPort=false，运行截图如下  修改完链接地址之后，需要将生成的页面提交到Github中才能被访问，首先需要将页面提交到master，由于我是在Windows操作系统上进行的，而CMD对Git的支持不是很好，故从此步开始切换为在Git Bash进行相关操作  利用subtree命令将master中public目录下的内容同步到gh-pages目录下\n此时访问该项目的设置页面，在Github Pages部分会看见如下信息\n 访问 https://fox321.github.io/blog ，出现如下页面，至此Hugo博客托管到Github Pages成功！\n  相关命令  生成绑定到指定域名的页面 hugo server -D --baseUrl=\u0026quot;http://lucumt.info\u0026quot; --appendPort=false 新版本的命令为hugo server --baseUrl=\u0026quot;https://lucumt.info/\u0026quot; --watch=false --appendPort=false --renderToDisk --environment production 将 master的public目录同步到分支 git subtree push --prefix=public git@github.com:fox321/blog.git gh-pages  利用GoDaddy配置自定义域名 在Using a custom domain with GitHub Pages中有详细的说明，我自己配置的时候主要是按照Setting up an apex domain中的说明在GoDaddy上的说明来设置的。\n 在public目录下创建一个名为 CNAME的文件，并在该文件中写入我们要自定义的域名，我自己的域名为 http://lucumt.info ，故填入lucumt.info\n 登陆Godaddy，然后在页面右上角点击自己的用户名，出现如下图所示的页面，选择Manage My Domains\n 选择完Manage My Domains之后会出现如下图所示的界面，选择Manage DNS\n 选择完Manage DNS之后会出现如下图所示的界面，点击Add按钮会出现下拉框让我们增加A记录\n 在Type部分选择 A ，Host部分选择 @， Poinst to根据Setting up an apex domain中的说明在GoDaddy中Configuring A records with your DNS provider部分的说明添加 192.30.252.153 ,点击Save即完成一条A记录的添加\n 再次点击Add添加，按照步骤5添加第二条A记录，除了Points to设置为 192.30.252.154 之外，其它的配置都相同 在Github项目中点击Settings按钮查看Github Pages区域的设置信息，若出现类似如下图所示的设置信息，则表示我们自定义域名添加成功\n  至此利用GoDaddy来配置自自定义域名的过程完成，输入 http://lucumt.info 即可访问自己的博客！\nPS:吐槽下让人觉得不爽的几个地方：\n 域名续费几乎没有折扣，所以建议第一次买的时间长一点。 取消订单功能消失了，现在只能打人工客服电话取消。  如果大家有GoDaddy之外更好的域名服务网站，欢迎给我留言，当然国内的域名服务商除外！\n开启自定义域名的HTTPS访问 请参见本人写的另外一篇文章 将基于Github Pages的自定义域名博客迁移到Https ，此处不再详述。\n\u0026lt;\u0026ndash;待续\u0026ndash;\u0026gt;\n","permalink":"http://localhost:1313/post/hugo/create-website-with-hugo/","tags":["Go","Hugo","Github Pages"],"title":"利用Github Pages和基于Go的Hugo搭建个人博客"}]